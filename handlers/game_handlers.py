import datetime as dt

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from random import shuffle, choice
from db.engine import session
from FSM.fsm import GrafomanForm, BullsNCows
from keyboards.keyboards import games_keyboard, begin_cancel_keyboard, \
    oracle_keyboard, grafoman_keyboard
from lexicon.lexicon import GAMES
from games.bulls_n_cows import secret_number
from utils.utils import select_user

game_router = Router()


@game_router.callback_query(F.data == 'games')
async def get_bus_schedule(callback: CallbackQuery):
    """–í—Å–µ –∏–≥—Ä—ã."""
    await callback.message.edit_reply_markup(reply_markup=games_keyboard())


@game_router.callback_query(F.data == 'games_cancel')
async def back_page(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–≥—Ä."""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=games_keyboard())


@game_router.callback_query(F.data == 'grafoman')
async def grafoman(callback: CallbackQuery, state: FSMContext):
    """–ò–≥—Ä–∞ –≥—Ä–∞—Ñ–æ–º–∞–Ω."""
    await callback.message.delete()
    await callback.message.answer(GAMES['grafoman_start'],
                                  reply_markup=grafoman_keyboard())
    await state.set_state(GrafomanForm.stroganize_text)


@game_router.message(StateFilter(GrafomanForm.stroganize_text))
async def stroganize_text(message: Message):
    """–ò–≥—Ä–∞ –≥—Ä–∞—Ñ–æ–º–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
    grafoman = ['üí™', 'ü§ù', '‚òùÔ∏è', 'üôè', 'üëç', ' –∏ –ê–ì–û–ß']
    graf_end = ' –° —É–≤., –°.–ù.üí™ü§ù!'
    consonant = ['–±', '–≤', '–≥', '–¥', '–∂', '–∑', '–∫', '–ª', '–º', '–Ω', '–ø', '—Ä',
                 '—Å', '—Ç', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â']

    await message.delete()
    text = message.text

    graf_text = text.split()

    len_text = len(graf_text)
    if len_text <= 3:
        await message.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–µ–±—è –≥—Ä–∞—Ñ–æ–º–∞–Ω–æ–º!')
    else:
        # –î–µ–ª–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        for i in graf_text:
            if len(i) >= 10:
                if i[5] in consonant:
                    ind = graf_text.index(i)
                    i = i[:6] + '.'
                    graf_text[ind] = i
                else:
                    ind = graf_text.index(i)
                    i = i[:5] + '.'
                    graf_text[ind] = i

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞–º –≤ –∫–æ–Ω—Ü–µ —Å–º–∞–π–ª—ã
        for i in range(len_text // 3):
            elem = choice(grafoman)
            word = choice(graf_text)
            ind = graf_text.index(word)
            new = graf_text[ind] + elem
            graf_text[ind] = new

        result = ' '.join(graf_text) + graf_end
        await message.answer(result, reply_markup=grafoman_keyboard())


@game_router.callback_query(F.data == 'about_bulls')
async def get_bulls_n_cows(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã –ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã."""
    await callback.message.delete()
    await state.set_state(BullsNCows.get_start)
    await callback.message.answer(GAMES['bc_start'],
                                  reply_markup=begin_cancel_keyboard())


@game_router.callback_query(StateFilter(BullsNCows.get_start), F.data == 'begin')
async def bc_start(callback: CallbackQuery, state: FSMContext):
    """–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã. –ù–∞—á–∞–ª–æ."""
    await callback.message.delete()
    await callback.message.answer(f'{GAMES["bc_start"]}\n'
                                  f'–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ:')
    await state.clear()


cnt_move = 1
ALL_MOVE = 6
secret = secret_number()
result = ['', '', '']


@game_router.message()
async def bc_first(message: Message, state: FSMContext):
    global secret
    global cnt_move
    global result
    digit = message.text
    if not digit.isdigit() or len(set(digit)) != 3:
        await message.delete()
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        digit = list(digit)
        for i in range(3):
            if digit[i] == secret[i]:
                result[i] = 'üêÆ '
            elif digit[i] in secret:
                result[i] = 'ü•õ '
            else:
                result[i] = '‚ùå '
        if result == ['üêÆ ', 'üêÆ ', 'üêÆ ']:
            result_str = ''.join(result)
            await message.delete()
            cnt_move = 1
            secret = secret_number()
            result = ['', '', '']
            await message.answer(f'{result_str}\nüéâüéâüéâ–í—ã –ø–æ–±–µ–¥–∏–ª–∏!üéâüéâüéâ',
                                 reply_markup=games_keyboard())
        else:
            if cnt_move == 5:
                await message.delete()
                cnt_move = 1
                secret = secret_number()
                result = ['', '', '']
                await message.answer('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?',
                                     reply_markup=begin_cancel_keyboard())
                await state.clear()
            else:
                await message.delete()
                result_str = ''.join(result)
                cnt_move += 1
                moves = ALL_MOVE - cnt_move
                await message.answer(
                    f'{result_str}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{moves}</b>')


@game_router.callback_query(F.data == 'about_oracle')
async def get_oracle(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã –û—Ä–∞–∫—É–ª."""
    await callback.message.delete()
    await callback.message.answer(GAMES['oracle_start'],
                                  reply_markup=oracle_keyboard())


today_count = 3


@game_router.callback_query(F.data == 'anticipate')
async def get_anticipate(callback: CallbackQuery):
    """–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ."""
    answers = [
        '–î–ê',
        '–ù–ï–¢',
        '–í–û–ó–ú–û–ñ–ù–û',
        '–ü–û–î–û–ñ–î–ò',
        '–ï–°–õ–ò –ß–£–í–°–¢–í–£–ï–®–¨ –í –°–ï–ë–ï –°–ò–õ–´ - –í–°–ï –ü–û–õ–£–ß–ò–¢–°–Ø',
        '–ü–û–°–¢–ê–í–¨ –¶–ï–õ–¨',
        '–ë–£–î–¨ –ë–õ–ê–ì–û–î–ê–†–ï–ù',
        '–ù–ï –¢–û–†–û–ü–ò–°–¨',
        '–î–ï–ô–°–¢–í–£–ô',
        '–û–î–ù–û–ó–ù–ê–ß–ù–û',
        '–¢–û–ß–ù–û –ù–ï –°–ï–ô–ß–ê–°',
        '–ü–†–ò–°–õ–£–®–ê–ô–°–Ø –ö –°–ï–ë–ï',
        '–ú–û–ñ–ù–û –ü–û–ü–†–û–ë–û–í–ê–¢–¨, –ù–û –û–°–¢–û–†–û–ñ–ù–û',
        '–í –î–†–£–ì–û–ô –†–ê–ó –ù–ê –≠–¢–û –£–ô–î–ï–¢ –ú–ï–ù–¨–®–ï –°–ò–õ',
        '–°–ü–†–û–°–ò –û–ë –≠–¢–û–ú –ó–ê–í–¢–†–ê',
        '–°–§–û–†–ú–£–õ–ò–†–£–ô –í–û–ü–†–û–° –ü–û_–î–†–£–ì–û–ú–£',
    ]

    global today_count
    oracle_today = dt.datetime.now().date()
    user = select_user(callback.message.chat.id)
    oracle_save = user.oracle_date_save

    if oracle_today != oracle_save:
        today_count = 3
        user.oracle_date_save = oracle_today
        session.add(user)
        session.commit()
    if today_count == 0:
        await callback.message.delete()
        await callback.message.answer('–û—Ä–∞–∫—É–ª —É—Å—Ç–∞–ª. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.',
                                      reply_markup=oracle_keyboard())
    else:
        today_count -= 1
        shuffle(answers)
        anticipate = f':ÔΩ•Ôæü‚úß:ÔΩ•.‚òΩÀöÔΩ°ÔΩ•Ôæü‚úß:ÔΩ•.:ÔΩ•‚úß:Ôæü‚òΩÔΩ•\n‚òΩÀö<b>–û—Ä–∞–∫—É–ª –≤–æ–∑–≤–µ—Å—Ç–∏–ª</b>‚úß:\n' \
                     f'.ÀöÔΩ°ÔΩ•Ôæü‚úß:ÔΩ•.:ÔΩ•Ôæü‚òΩÔΩ•Ôæü‚úß:ÔΩ•ÔΩ°ÔΩ•:ÔΩ•Ôæü\n\n{answers[0]}'
        await callback.message.delete()
        await callback.message.answer(anticipate,
                                      reply_markup=oracle_keyboard())
