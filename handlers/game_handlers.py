from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from random import randint
import datetime as dt

from keyboards.keyboards import games_keyboard, begin_cancel_keyboard, \
    oracle_keyboard
from lexicon.lexicon import GAMES
from games.bulls_n_cows import secret_number

game_router = Router()


@game_router.callback_query(F.data == 'games')
async def get_bus_schedule(callback: CallbackQuery):
    """–í—Å–µ –∏–≥—Ä—ã."""
    await callback.message.edit_reply_markup(reply_markup=games_keyboard())


@game_router.callback_query(F.data == 'games_cancel')
async def back_page(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–≥—Ä."""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=games_keyboard())


@game_router.callback_query(F.data == 'about_bulls')
async def get_bulls_n_cows(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã –ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã."""
    await callback.message.delete()
    await callback.message.answer(GAMES['bc_start'],
                                  reply_markup=begin_cancel_keyboard())


@game_router.callback_query(F.data == 'begin')
async def bc_start(callback: CallbackQuery, state: FSMContext):
    """–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã. –ù–∞—á–∞–ª–æ."""
    await callback.message.delete()
    await callback.message.answer(f'{GAMES["bc_start"]}\n'
                                  f'–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ:')


cnt_move = 1
ALL_MOVE = 6
secret = secret_number()
result = ['', '', '']


@game_router.message()
async def bc_start(message: Message, state: FSMContext):
    global secret
    global cnt_move
    global result
    print(secret)
    digit = message.text
    if not digit.isdigit() or len(set(digit)) != 3:
        await message.delete()
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    else:
        digit = list(digit)
        for i in range(3):
            if digit[i] == secret[i]:
                result[i] = 'üêÆ '
            elif digit[i] in secret:
                result[i] = 'ü•õ '
            else:
                result[i] = '‚ùå '
        if result == ['üêÆ ', 'üêÆ ', 'üêÆ ']:
            result_str = ''.join(result)
            await message.delete()
            cnt_move = 1
            secret = secret_number()
            result = ['', '', '']
            await message.answer(f'{result_str}\nüéâüéâüéâ–í—ã –ø–æ–±–µ–¥–∏–ª–∏!üéâüéâüéâ',
                                 reply_markup=games_keyboard())
        else:
            if cnt_move == 5:
                await message.delete()
                cnt_move = 1
                secret = secret_number()
                result = ['', '', '']
                await message.answer('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?',
                                     reply_markup=begin_cancel_keyboard())
                await state.clear()
            else:
                await message.delete()
                result_str = ''.join(result)
                cnt_move += 1
                moves = ALL_MOVE - cnt_move
                await message.answer(
                    f'{result_str}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{moves}</b>')


@game_router.callback_query(F.data == 'about_oracle')
async def get_oracle(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã –û—Ä–∞–∫—É–ª."""
    await callback.message.delete()
    await callback.message.answer(GAMES['oracle_start'],
                                  reply_markup=oracle_keyboard())

today_count = 3
oracle_today = dt.datetime.today().strftime("%D")
oracle_save = '10/28/23'


@game_router.callback_query(F.data == 'anticipate')
async def get_anticipate(callback: CallbackQuery):
    """–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ."""
    ANSWERS = {
        0: '–î–ê',
        1: '–ù–ï–¢',
        2: '–í–û–ó–ú–û–ñ–ù–û',
        3: '–ü–û–î–û–ñ–î–ò',
        4: '–ï–°–õ–ò –ß–£–í–°–¢–í–£–ï–®–¨ –í –°–ï–ë–ï –°–ò–õ–´ - –í–°–ï –ü–û–õ–£–ß–ò–¢–°–Ø',
        5: '–ü–û–°–¢–ê–í–¨ –¶–ï–õ–¨',
        6: '–ë–£–î–¨ –ë–õ–ê–ì–û–î–ê–†–ï–ù',
        7: '–ù–ï –¢–û–†–û–ü–ò–°–¨',
        8: '–î–ï–ô–°–¢–í–£–ô'
    }
    global today_count
    global oracle_save
    global oracle_today
    if oracle_today != oracle_save:
        today_count = 3
        oracle_save = oracle_today
    if today_count == 0:
        await callback.message.delete()
        await callback.message.answer('–û—Ä–∞–∫—É–ª —É—Å—Ç–∞–ª. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.',
                                      reply_markup=oracle_keyboard())
    else:
        today_count -= 1
        digit = randint(0, 6)
        anticipate = f':ÔΩ•Ôæü‚úß:ÔΩ•.‚òΩÀöÔΩ°ÔΩ•Ôæü‚úß:ÔΩ•.:ÔΩ•‚úß:Ôæü‚òΩÔΩ•\n‚òΩÀö<b>–û—Ä–∞–∫—É–ª –≤–æ–∑–≤–µ—Å—Ç–∏–ª</b>‚úß:\n' \
                     f'.ÀöÔΩ°ÔΩ•Ôæü‚úß:ÔΩ•.:ÔΩ•Ôæü‚òΩÔΩ•Ôæü‚úß:ÔΩ•ÔΩ°ÔΩ•:ÔΩ•Ôæü\n\n{ANSWERS[digit]}'
        await callback.message.delete()
        await callback.message.answer(anticipate,
                                      reply_markup=oracle_keyboard())
